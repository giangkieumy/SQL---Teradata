



1. What is the average amount of profit Dillard’s made per day? --
SELECT SUM(t.amt - (s.cost*t.quantity)) prof, COUNT(DISTINCT t.saledate) totalday, prof/totalday avg_profit
FROM TRNSACT t
INNER JOIN SKSTINFO s
ON t.sku = s.sku AND t.store = s.store
WHERE stype = 'P';

2. What department (with department description), brand, style, and color brought in the greatest total amount of sales?--
SELECT TOP 3 d.dept, d.deptdesc, s.brand, s.style, s.color, SUM(t.amt)
FROM deptinfo d
INNER JOIN skuinfo s
ON d.dept = s.dept
INNER JOIN trnsact t
ON t.sku = s.sku
WHERE stype = 'P'
GROUP BY d.dept, d.deptdesc, s.brand, s.style, s.color
ORDER BY SUM(t.amt) DESC;

3. In what city and state is the store that had the greatest total sum of sales?--
SELECT TOP 2 SUM(t.amt) totalsale, t.store, s.city, s.state
FROM TRNSACT t
INNER JOIN STRINFO s
ON t.store = s.store
WHERE stype = 'P' 
GROUP BY t.store, s.state, s.city
ORDER BY totalsale DESC;

4. How many states have more than 10 Dillards stores in them?--
SELECT COUNT(DISTINCT store) storenum, state
FROM STRINFO
GROUP BY state
HAVING storenum > 10;

5. Divide the msa_income groups up so that msa_incomes between 1 and 20,000 are labeled 'low', msa_incomes between 20,001 and 30,000 are labeled 'med-low', msa_incomes between 30,001 and 40,000 are labeled 'med-high', and msa_incomes between 40,001 and 60,000 are labeled 'high'. Which of these groups has the highest average daily revenue (as defined in Teradata Week 5 Exercise Guide) per store?--
SELECT 	CASE 
	WHEN msa.msa_income >0 AND msa.msa_income <=20000 THEN 'low'
	WHEN msa.msa_income >20000 AND msa.msa_income <=30000 THEN 'med-low'
	WHEN msa.msa_income >30000 AND msa.msa_income <=40000 THEN 'med-high'
	WHEN msa.msa_income >40000 AND msa.msa_income <=60000 THEN 'high'
 
	END AS ranking,
	SUM(daily_revenue) / SUM(num_days) AS avg_daily_revenue
FROM 	
	(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue, EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY store, dm, dy
	HAVING num_days >= 20 AND dym <> '2005 8') AS T
JOIN store_msa AS msa
ON msa.store = T.store
GROUP BY ranking;

6. Divide stores up so that stores with msa populations between 1 and 100,000 are labeled 'very small', stores with msa populations between 100,001 and 200,000 are labeled 'small', stores with msa populations between 200,001 and 500,000 are labeled 'med_small', stores with msa populations between 500,001 and 1,000,000 are labeled 'med_large', stores with msa populations between 1,000,001 and 5,000,000 are labeled “large”, and stores with msa_population greater than 5,000,000 are labeled “very large”. What is the average daily revenue (as defined in Teradata Week 5 Exercise Guide) for a store in a “very large” population msa?--
SELECT CASE 
	WHEN msa.msa_pop >0 AND msa.msa_pop <=100000 THEN 'very small'
	WHEN msa.msa_pop >100000 AND msa.msa_pop <=200000 THEN 'small'
	WHEN msa.msa_pop >200000 AND msa.msa_pop <=500000 THEN 'med-small'
	WHEN msa.msa_pop >500000 AND msa.msa_pop <=1000000 THEN 'med_large'
 	WHEN msa.msa_pop >1000000 AND msa.msa_pop <=5000000 THEN 'large'
 	WHEN msa.msa_pop >5000000 THEN 'very large'
	END AS ranking,
	SUM(daily_revenue) / SUM(num_days) AS avg_daily_revenue
FROM 
	(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue, EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY store, dm, dy
	HAVING num_days >= 20 AND dym <> '2005 8') AS T
JOIN store_msa AS msa
ON msa.store = T.store
GROUP BY ranking
ORDER BY avg_daily_revenue;

7. For each store, determine the month with the minimum average daily revenue (as defined in Teradata Week 5 Exercise Guide) . For each of the twelve months of the year, count how many stores' minimum average daily revenue was in that month. During which month(s) did over 100 stores have their minimum average daily revenue?--
SELECT T.dm, COUNT(DISTINCT T.store)
FROM 
	(SELECT store, 
		EXTRACT(MONTH FROM saledate) AS dm, 
		EXTRACT (YEAR FROM saledate) AS dy, 
		COUNT(DISTINCT saledate) AS num_days, 
		SUM(amt) AS daily_revenue, 
		daily_revenue / num_days AS avg_daily_rev, 
		EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym, 
		RANK() OVER(PARTITION BY store ORDER BY avg_daily_rev ASC) AS ranking
		FROM trnsact
		WHERE stype = 'P'
		GROUP BY store, dm, dy
		HAVING num_days >= 20 AND dym <> '2005 8') AS T
WHERE T.ranking = 1
GROUP BY T.dm;

