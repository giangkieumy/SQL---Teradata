PART 1
DATABASE ua_dillards;
--Q1: On what day was Dillard’s income based on total sum of purchases the greatest--
SELECT TOP 3 saledate, SUM(amt)
FROM TRNSACT
WHERE stype = 'P' 
GROUP BY saledate
ORDER BY SUM(amt) DESC;

--Q2: What is the deptdesc of the departments that have the top 3 greatest numbers of skus from the skuinfo table associated with them?--
SELECT TOP 3 COUNT (DISTINCT s.sku) num, s.dept, d.deptdesc
FROM skuinfo s
INNER JOIN deptinfo d
ON s.dept = d.dept
GROUP BY s.dept, deptdesc
ORDER BY num DESC;

--Q3: Which table contains the most distinct sku numbers?--
SELECT COUNT(DISTINCT sku)
FROM skuinfo;
SELECT COUNT(DISTINCT sku)
FROM TRNSACT;
SELECT COUNT(DISTINCT sku)
FROM SKSTINFO;

--Q4: How many skus are in the skstinfo table, but NOT in the skuinfo table?--
SELECT COUNT(DISTINCT skstinfo.sku)
FROM skstinfo skst
INNER JOIN skuinfo s
ON skst.sku = s.sku
WHERE s.sku IS NULL;

--Q5: What is the average amount of profit Dillard’s made per day? --
SELECT SUM(t.amt - (s.cost*t.quantity)) prof, COUNT(DISTINCT t.saledate) totalday, prof/totalday avg_profit
FROM TRNSACT t
INNER JOIN SKSTINFO s
ON t.sku = s.sku AND t.store = s.store
WHERE stype = 'P';

--Q6: The store_msa table provides population statistics about the geographic location around a store. Using one query to retrieve your answer, how many MSAs are there within the state of North Carolina (abbreviated “NC”), and within these MSAs, what is the lowest population level (msa_pop) and highest income level (msa_income)?--
SELECT COUNT(DISTINCT store), MIN(msa_pop), MAX(msa_income)
FROM store_msa
WHERE state = 'NC';

--Q7: What department (with department description), brand, style, and color brought in the greatest total amount of sales?--
SELECT TOP 3 d.dept, d.deptdesc, s.brand, s.style, s.color, SUM(t.amt)
FROM deptinfo d
INNER JOIN skuinfo s
ON d.dept = s.dept
INNER JOIN trnsact t
ON t.sku = s.sku
WHERE stype = 'P'
GROUP BY d.dept, d.deptdesc, s.brand, s.style, s.color
ORDER BY SUM(t.amt) DESC;

--Q8: How many stores have more than 180,000 distinct skus associated with them in the skstinfo table?--
SELECT COUNT(DISTINCT sku)
FROM skstinfo
GROUP BY store
HAVING COUNT(DISTINCT sku)>180000;

--Q9: Look at the data from all the distinct skus in the “cop” department with a “federal” brand and a “rinse wash” color. You'll see that these skus have the same values in some of the columns, meaning that they have some features in common.
In which columns do these skus have different values from one another, meaning that their features differ in the categories represented by the columns?--
SELECT DISTINCT s.sku, s.dept, s.color, s.brand, s.style, s.size, s.packsize, s.vendor, d.deptdesc
FROM Skuinfo s
INNER JOIN Deptinfo d
ON s.dept = d.dept AND s.dept = d.dept
WHERE d.deptdesc = 'cop' AND s.brand = 'federal' AND s.color = 'rinse wash';

--Q10: How many skus are in the skuinfo table, but NOT in the skstinfo table? --
SELECT COUNT(DISTINCT s.sku)
FROM skuinfo s
LEFT JOIN skstinfo skst
ON s.sku = skst.sku
WHERE skst.sku IS NULL;

--Q11:In what city and state is the store that had the greatest total sum of sales?--
SELECT TOP 2 SUM(t.amt) totalsale, t.store, s.city, s.state
FROM TRNSACT t
INNER JOIN STRINFO s
ON t.store = s.store
WHERE stype = 'P' 
GROUP BY t.store, s.state, s.city
ORDER BY totalsale DESC;

--Q12: How many states have more than 10 Dillards stores in them?--
SELECT COUNT(DISTINCT store) storenum, state
FROM STRINFO
GROUP BY state
HAVING storenum > 10;

--Q13: What is the suggested retail price of all the skus in the “reebok” department with the “skechers” brand and a “wht/saphire” color?--
SELECT DISTINCT s.sku, s.color, t.retail, d.dept, d.deptdesc
FROM skuinfo s
INNER JOIN skstinfo t
ON s.sku = t.sku
INNER JOIN deptinfo d
ON s.dept = d.dept
WHERE d.deptdesc = 'reebok' AND s.brand = 'skechers' AND s.color = 'wht/saphire';


PART 2:
--Q1: How many distinct skus have the brand “Polo fas”, and are either size “XXL” or “black” in color?--
SELECT COUNT(DISTINCT sku)
FROM skuinfo
WHERE brand = 'polo fas' and (color = 'black' or size = 'XXL');

--Q2: There was one store in the database which had only 11 days in one of its months (in other words, that store/month/year combination only contained 11 days of transaction data). In what city and state was this store located?--
SELECT DISTINCT (s.store || extract(month from saledate) || extract(year from saledate)) as combination,
COUNT(DISTINCT saledate) as num, s.state, s.city
FROM store_msa s 
LEFT JOIN trnsact t
ON s.store = t.store
GROUP BY combination, s.state, s.city
ORDER BY num asc;

--Q3: Which sku number had the greatest increase in total sales revenue from November to December?--
SELECT TOP 1 T.sku,
	SUM(CASE WHEN T.dm=11 THEN T.daily_revenue END) AS nov_sales,
	SUM(CASE WHEN T.dm=12 THEN T.daily_revenue END) AS dec_sales,
	dec_sales - nov_sales AS sales_increase
FROM 
	(SELECT sku, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY sku, dm, dy
	HAVING num_days >= 20 AND dm IN (11,12)) AS T
GROUP BY T.sku
ORDER BY sales_increase DESC;

--Q4: What vendor has the greatest number of distinct skus in the transaction table that do not exist in the skstinfo table? (Remember that vendors are listed as distinct numbers in our data set).--
SELECT s.vendor, COUNT(DISTINCT s.sku) as num_skus
FROM trnsact AS t
RIGHT JOIN skuinfo AS s
ON t.sku = s.sku
WHERE t.sku IS NULL
GROUP BY s.vendor
ORDER BY num_skus;

--Q5: What is the brand of the sku with the greatest standard deviation in sprice? Only examine skus which have been part of over 100 transactions.--

--Q6: What is the city and state of the store which had the greatest increase in average daily revenue (as defined in Teradata Week 5 Exercise Guide) from November to December?--
SELECT T2.store, msa.city, msa.state
FROM 
	(SELECT TOP 1 T.store,
		SUM(CASE WHEN T.dm=11 THEN T.num_days END) AS nov_day_sum,
		SUM(CASE WHEN T.dm=12 THEN T.num_days END) AS dec_day_sum,
		SUM(CASE WHEN T.dm=11 THEN T.daily_revenue END) AS nov_rev,
		SUM(CASE WHEN T.dm=12 THEN T.daily_revenue END) AS dec_rev,
		nov_rev/nov_day_sum AS y,
	 	dec_rev/dec_day_sum AS x,
		x-y AS increase
	FROM 
		(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue
		FROM trnsact
		WHERE stype = 'P'
		GROUP BY store, dm, dy
		HAVING num_days >= 20 AND dm IN (11,12)) AS T
	GROUP BY store
	ORDER BY increase DESC) AS T2
JOIN store_msa AS msa
ON T2.store = msa.store;

--Q7: Compare the average daily revenue (as defined in Teradata Week 5 Exercise Guide) of the store with the highest msa_income and the store with the lowest median msa_income (according to the msa_income field). In what city and state were these two stores, and which store had a higher average daily revenue?--
SELECT DISTINCT T.store, MAX(max_msa.msa_income) AS max_income, MIN(min_msa.msa_income) AS min_income, MAX(msa.city), MAX(msa.state), MAX(msa.msa_income), SUM(daily_revenue) / SUM(num_days) AS avg_daily_revenue
FROM 
	(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue, EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY store, dm, dy
	HAVING num_days >= 20 AND dym <> '2005 8') AS T
JOIN store_msa AS msa
ON msa.store = T.store
LEFT JOIN  
	(SELECT TOP 1 store, msa_income
	FROM store_msa
	ORDER BY msa_income DESC) AS max_msa
ON max_msa.store = T.store 
LEFT JOIN  
	(SELECT TOP 1 store, msa_income
	FROM store_msa
	ORDER BY msa_income ASC) AS min_msa
ON min_msa.store = T.store 
WHERE min_msa.msa_income = msa.msa_income OR max_msa.msa_income = msa.msa_income
GROUP BY T.store

--Q8: Divide the msa_income groups up so that msa_incomes between 1 and 20,000 are labeled 'low', msa_incomes between 20,001 and 30,000 are labeled 'med-low', msa_incomes between 30,001 and 40,000 are labeled 'med-high', and msa_incomes between 40,001 and 60,000 are labeled 'high'. Which of these groups has the highest average daily revenue (as defined in Teradata Week 5 Exercise Guide) per store?--
SELECT 	CASE 
	WHEN msa.msa_income >0 AND msa.msa_income <=20000 THEN 'low'
	WHEN msa.msa_income >20000 AND msa.msa_income <=30000 THEN 'med-low'
	WHEN msa.msa_income >30000 AND msa.msa_income <=40000 THEN 'med-high'
	WHEN msa.msa_income >40000 AND msa.msa_income <=60000 THEN 'high'
 
	END AS ranking,
	SUM(daily_revenue) / SUM(num_days) AS avg_daily_revenue
FROM 	
	(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue, EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY store, dm, dy
	HAVING num_days >= 20 AND dym <> '2005 8') AS T
JOIN store_msa AS msa
ON msa.store = T.store
GROUP BY ranking;

--Q9: Divide stores up so that stores with msa populations between 1 and 100,000 are labeled 'very small', stores with msa populations between 100,001 and 200,000 are labeled 'small', stores with msa populations between 200,001 and 500,000 are labeled 'med_small', stores with msa populations between 500,001 and 1,000,000 are labeled 'med_large', stores with msa populations between 1,000,001 and 5,000,000 are labeled “large”, and stores with msa_population greater than 5,000,000 are labeled “very large”. What is the average daily revenue (as defined in Teradata Week 5 Exercise Guide) for a store in a “very large” population msa?--
SELECT CASE 
	WHEN msa.msa_pop >0 AND msa.msa_pop <=100000 THEN 'very small'
	WHEN msa.msa_pop >100000 AND msa.msa_pop <=200000 THEN 'small'
	WHEN msa.msa_pop >200000 AND msa.msa_pop <=500000 THEN 'med-small'
	WHEN msa.msa_pop >500000 AND msa.msa_pop <=1000000 THEN 'med_large'
 	WHEN msa.msa_pop >1000000 AND msa.msa_pop <=5000000 THEN 'large'
 	WHEN msa.msa_pop >5000000 THEN 'very large'
	END AS ranking,
	SUM(daily_revenue) / SUM(num_days) AS avg_daily_revenue
FROM 
	(SELECT store, EXTRACT(MONTH FROM saledate) AS dm, EXTRACT (YEAR FROM saledate) AS dy, COUNT(DISTINCT saledate) AS num_days, SUM(amt) AS daily_revenue, EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym
	FROM trnsact
	WHERE stype = 'P'
	GROUP BY store, dm, dy
	HAVING num_days >= 20 AND dym <> '2005 8') AS T
JOIN store_msa AS msa
ON msa.store = T.store
GROUP BY ranking
ORDER BY avg_daily_revenue;

--Q10: Which department in which store had the greatest percent increase in average daily sales revenue from November to December, and what city and state was that store located in? Only examine departments whose total sales were at least $1,000 in both November and December.--

--Q11: Which department within a particular store had the greatest decrease in average daily sales revenue from August to September, and in what city and state was that store located?--
SELECT T2.store, T2.dept, deptinfo.deptdesc, msa.city, msa.state, T2.change
FROM 
	(SELECT T.store, T.dept,
		SUM(CASE WHEN T.dm=8 THEN T.num_days END) AS aug_day_sum,
		SUM(CASE WHEN T.dm=9 THEN T.num_days END) AS sept_day_sum,
		SUM(CASE WHEN T.dm=8 THEN T.daily_revenue END) AS aug_rev_sum,
		SUM(CASE WHEN T.dm=9 THEN T.daily_revenue END) AS sept_rev_sum,
		aug_rev_sum / sept_day_sum AS y,
	 	sept_rev_sum / sept_day_sum AS x,
		y-x AS change
	FROM 
		(SELECT store, skuinfo.dept,
			EXTRACT(MONTH FROM saledate) AS dm, 
			EXTRACT (YEAR FROM saledate) AS dy, 
			COUNT(DISTINCT saledate) AS num_days, 
			SUM(amt) AS daily_revenue
		FROM trnsact
		JOIN skuinfo
		ON trnsact.sku = skuinfo.sku  
		WHERE stype = 'P'
		GROUP BY store, dept, dm, dy
		HAVING num_days >= 20 AND dm IN (8,9) AND dy <> 2005) AS T
	GROUP BY T.store, T.dept) AS T2
JOIN store_msa AS msa
ON T2.store = msa.store
JOIN deptinfo
ON T2.dept = deptinfo.dept
WHERE T2.change IS NOT NULL
ORDER BY T2.change DESC;

--Q12: Identify which department, in which city and state of what store, had the greatest DECREASE in the number of items sold from August to September. How many fewer items did that department sell in September compared to August?--
SELECT T2.store, T2.dept, deptinfo.deptdesc, msa.city, msa.state, T2.change
FROM 
	(SELECT T.store, T.dept,
		SUM(CASE WHEN T.dm=8 THEN T.num_items END) AS aug_day_sum,
		SUM(CASE WHEN T.dm=9 THEN T.num_items END) AS sept_day_sum,
		aug_day_sum - sept_day_sum AS change
	FROM 
		(SELECT store, skuinfo.dept,
			EXTRACT(MONTH FROM saledate) AS dm, 
			EXTRACT (YEAR FROM saledate) AS dy, 
			COUNT(DISTINCT saledate) AS num_days, 
			SUM(quantity) AS num_items
		FROM trnsact
		JOIN skuinfo
		ON trnsact.sku = skuinfo.sku  
		WHERE stype = 'P'
		GROUP BY store, dept, dm, dy
		HAVING num_days >= 20 AND dm IN (8,9) AND dy <> 2005) AS T
	GROUP BY T.store, T.dept) AS T2
JOIN store_msa AS msa
ON T2.store = msa.store
JOIN deptinfo
ON T2.dept = deptinfo.dept
WHERE T2.change IS NOT NULL
ORDER BY T2.change DESC;

--Q13: For each store, determine the month with the minimum average daily revenue (as defined in Teradata Week 5 Exercise Guide) . For each of the twelve months of the year, count how many stores' minimum average daily revenue was in that month. During which month(s) did over 100 stores have their minimum average daily revenue?--
SELECT T.dm, COUNT(DISTINCT T.store)
FROM 
	(SELECT store, 
		EXTRACT(MONTH FROM saledate) AS dm, 
		EXTRACT (YEAR FROM saledate) AS dy, 
		COUNT(DISTINCT saledate) AS num_days, 
		SUM(amt) AS daily_revenue, 
		daily_revenue / num_days AS avg_daily_rev, 
		EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym, 
		RANK() OVER(PARTITION BY store ORDER BY avg_daily_rev ASC) AS ranking
		FROM trnsact
		WHERE stype = 'P'
		GROUP BY store, dm, dy
		HAVING num_days >= 20 AND dym <> '2005 8') AS T
WHERE T.ranking = 1
GROUP BY T.dm;

--Q14: Write a query that determines the month in which each store had its maximum number of sku units returned. During which month did the greatest number of stores have their maximum number of sku units returned?--
SELECT T.dm, COUNT(DISTINCT T.store)
FROM 
	(SELECT store, 
		EXTRACT(MONTH FROM saledate) AS dm, 
		EXTRACT (YEAR FROM saledate) AS dy, 
		COUNT(DISTINCT saledate) AS num_days, 
		SUM(quantity) AS daily_returns, 
		EXTRACT(YEAR FROM saledate)||EXTRACT(MONTH FROM saledate) AS dym, 
		RANK() OVER(PARTITION BY store ORDER BY daily_returns DESC) AS ranking
		FROM trnsact
		WHERE stype = 'R'
		GROUP BY store, dm, dy
		HAVING num_days >= 20 AND dym <> '2005 8') AS T
WHERE T.ranking = 1
GROUP BY T.dm;
